@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.example.eventbooking.QRCode.ScannedFragment",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1322970774 { 
   	label=example
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_92572291 { 
   	label=eventbooking
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   MainActivity806146256[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)MainActivity</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   adminFragment: AdminFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   bottomNavigationView: BottomNavigationView [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   cameraFragment: CameraFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   currentGeoPoint: GeoPoint [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   drawerLayout: DrawerLayout [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   drawerToggle: ActionBarDrawerToggle [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   eventCodeGenerate: QRCodeEventGenerate [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   eventCreateFragment: EventCreateFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   eventFragment: EventFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   eventIdFromQR: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   homeFragment: HomeFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   locationRequest: LocationRequest [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   loginFragment: LoginFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   navController: NavController [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   navigationView: NavigationView [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   notificationFragment: NotificationFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   organizerFragment: OragnizerEventFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   organizerMenuFragment: OrganizerMenuFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   profileEntrantFragment: ProfileEntrantFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   profileFragment: ProfileFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   qrCodeImageView: ImageView [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   qrGenerator: QRcodeGenerator [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scannedFragment: ScannedFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   testFragment: TestFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   viewAcceptedListFragment: ViewAcceptedListFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   viewCanceledListFragment: ViewCanceledListFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   viewSignedListFragment: ViewSignedListFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   viewWaitingListFragment: ViewWaitingListFragment [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ createNotificationChannel(context: Context)</TD></TR>
<TR><TD ALIGN="LEFT" >- extractEventHashFromUrl(url: String): String</TD></TR>
<TR><TD ALIGN="LEFT" >- extractEventIdFromUrl(url: String): String</TD></TR>
<TR><TD ALIGN="LEFT" >- getCurrentLocation()</TD></TR>
<TR><TD ALIGN="LEFT" >- handleIntent(intent: Intent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ hideNavigationUI()</TD></TR>
<TR><TD ALIGN="LEFT" >+ loadAdminSidePanel()</TD></TR>
<TR><TD ALIGN="LEFT" >+ loadStandardSidePanel()</TD></TR>
<TR><TD ALIGN="LEFT" >+ loadTestSidePanel()</TD></TR>
<TR><TD ALIGN="LEFT" >- moveToFragment(movingFragment: Fragment)</TD></TR>
<TR><TD ALIGN="LEFT" >+ onBackPressed()</TD></TR>
<TR><TD ALIGN="LEFT" ># onCreate(savedInstanceState: Bundle)</TD></TR>
<TR><TD ALIGN="LEFT" >+ onLoginSuccess()</TD></TR>
<TR><TD ALIGN="LEFT" >+ onNavigationItemSelected(item: MenuItem): boolean</TD></TR>
<TR><TD ALIGN="LEFT" ># onNewIntent(intent: Intent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ onRequestPermissionsResult(requestCode: int, permissions: String[], grantResults: int[])</TD></TR>
<TR><TD ALIGN="LEFT" >- openEventViewFragment(eventID: String)</TD></TR>
<TR><TD ALIGN="LEFT" >- showLoginFragment(eventIdFromQR: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ showNavigationUI()</TD></TR>
<TR><TD ALIGN="LEFT" >- turnOnGPS()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ScannedFragment1444445836[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ScannedFragment</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   eventId: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scanView: TextView [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scannerOpenButton: Button [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ newInstance(scannedData: String): ScannedFragment</TD></TR>
<TR><TD ALIGN="LEFT" >+ onCreate(savedInstanceState: Bundle)</TD></TR>
<TR><TD ALIGN="LEFT" >+ onCreateView(inflater: LayoutInflater, container: ViewGroup, savedInstanceState: Bundle): View</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TestAdminFragment806146256[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TestAdminFragment</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   EventList: List&lt;Event&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   loadingEventList: List&lt;Event&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   loadingFacilityList: List&lt;Facility&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   loadingUserList: List&lt;User&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >+   permissionRule: GrantPermissionRule [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scenario: ActivityScenario&lt;MainActivity&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   user: User [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ disableAnimations()</TD></TR>
<TR><TD ALIGN="LEFT" >- initalizeUserAndEvents()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToEventDelete()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToEventEditView()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToFacilityDelete()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToImageDelete()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToUserDelete()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToUserEditView()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TestHomeFragment806146256[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TestHomeFragment</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   EventList: List&lt;Event&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   loadingEventList: List&lt;Event&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   loadingFacilityList: List&lt;Facility&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   loadingUserList: List&lt;User&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >+   permissionRule: GrantPermissionRule [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scenario: ActivityScenario&lt;MainActivity&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   user: User [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- initalizeUserAndEvents()</TD></TR>
<TR><TD ALIGN="LEFT" >+ tearDown()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testInitialUI()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToAdmin()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToEvent()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToHome()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToNotifications()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToOrganizer()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToProfile()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToProfileBottom()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TestLoginFragment806146256[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TestLoginFragment</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   loginFragment: LoginFragment [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   permissionRule: GrantPermissionRule [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scenario: ActivityScenario&lt;MainActivity&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   user: User [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ testExistingUserWithEventID()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testLoginWithoutEventID()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNewUserWithEventID()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNewUserWithoutEventID()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testTestModeActivation()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TestOrganizerMenuFragment806146256[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TestOrganizerMenuFragment</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   permissionRule: GrantPermissionRule [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scenario: ActivityScenario&lt;MainActivity&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   testEventId: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   user: User [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ disableAnimations()</TD></TR>
<TR><TD ALIGN="LEFT" >- initializeUserAndEvents()</TD></TR>
<TR><TD ALIGN="LEFT" >+ tearDown()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testCancelEntrant()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testDrawReplacementButton()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testGenerateQRCode()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToViewAcceptedList()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testNavigateToViewWaitingList()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testRemovePosterButton()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testSampleAttendeesButton()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testUIComponentsAreDisplayed()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testUploadPosterButton()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TestProfileFragment806146256[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TestProfileFragment</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   EventList: List&lt;Event&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >+   permissionRule: GrantPermissionRule [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scenario: ActivityScenario&lt;MainActivity&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   user: User [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- initalizeUserAndEvents()</TD></TR>
<TR><TD ALIGN="LEFT" >+ tearDown()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testProfileEdit()</TD></TR>
<TR><TD ALIGN="LEFT" >+ testProfileUploadAndRemove()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
MainActivity806146256 -> ScannedFragment1444445836[label="scannedFragment
[0..1]"];
TestAdminFragment806146256 -> MainActivity806146256[label="scenario
[0..1]"];
TestHomeFragment806146256 -> MainActivity806146256[label="scenario
[0..1]"];
TestLoginFragment806146256 -> MainActivity806146256[label="scenario
[0..1]"];
TestOrganizerMenuFragment806146256 -> MainActivity806146256[label="scenario
[0..1]"];
TestProfileFragment806146256 -> MainActivity806146256[label="scenario
[0..1]"];
    
}
@enduml